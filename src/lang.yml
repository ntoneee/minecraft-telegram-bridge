telegram:
  # Messages to Telegram templates
  # You can use simple HTML formatting here, read more on https://core.telegram.org/bots/api#html-style

  # Constant strings
  server-state:
    enable: "‚úÖ <b>–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!</b>"
    disable: "‚ùå <b>–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>"

  # Common variables: {userDisplayName}
  player-event:
    join: "<b>\uD83E\uDD73 {userDisplayName} –∑–∞—à—ë–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä</b>"
    join-first-time: "<b>\uD83E\uDD73 {userDisplayName} –∑–∞—à—ë–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑!</b>"
    leave: "<b>\uD83D\uDE15 {userDisplayName} –ø–æ–∫–∏–Ω—É–ª —Å–µ—Ä–≤–µ—Ä</b>"
    # Variable: {deathMessage} for death message, e.g. `Steve fell from a high place`
    death: "\u2620\uFE0F <b>{deathMessage}</b>"
    # Variable: {message} for the message sent
    message: "üí¨ <b>[{userDisplayName}]</b> {message}"
    # Advancement congratulation strings are stored separately for each advancement level, in level decreasing order
    # Now only BlazeandCave's Advancement Pack is supported, vanilla advancements without that data pack may be shown incorrectly.
    # Variables: {advancementTitle} for advancement title and {advancementDescription} for detailed description
    advancement:
      challenge: "<b>üèÖ {userDisplayName} –∑–∞–≤–µ—Ä—à–∏–ª –∏—Å–ø—ã—Ç–∞–Ω–∏–µ {advancementTitle}</b>\n\n<i>{advancementDescription}</i>"
      goal: "<b>üéØ {userDisplayName} –¥–æ—Å—Ç–∏–≥ —Ü–µ–ª–∏ {advancementTitle}</b>\n\n<i>{advancementDescription}</i>"
      task: "<b>üòº {userDisplayName} –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ {advancementTitle}</b>\n\n<i>{advancementDescription}</i>"

  # This section matters when in config.yml telegram-list-message-id is non-zero.
  # Variables: {announcement} - announcement set by admins in config.yml or using /setAnnouncement in admin chat
  announcement-message:
    server-disabled: "‚ùå <b>{announcement}–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>"
    # Variables: onlineCount - count of players online, onlinePlayers - comma-separated display names of online people.
    server-enabled: "üìù <b>{announcement}–û–Ω–ª–∞–π–Ω {onlineCount}: {onlinePlayers}</b>"
    server-enabled-zero-online:  "üìù <b>{announcement}–û–Ω–ª–∞–π–Ω 0</b>"

  list: "üìù <b>–û–Ω–ª–∞–π–Ω {onlineCount}: {onlinePlayers}</b>"
  zero-online: "üìù <b>–û–Ω–ª–∞–π–Ω 0</b>"

minecraft:
  # Messages to Minecraft templates
  # Variable {colorx} - ChatColor.getByChar(x), e.g. {colorb} will result in Aqua color code, {colorr} in Reset color code.
  # Read about colors on https://minecraft.fandom.com/wiki/Formatting_codes. Ignore ¬ß sign in color and format codes there.
  # Other variables: {senderName} - first and last name of Telegram message sender;
  # - {messageMeta} - message non-text data (e.g. changed chat title, sent photo, sticker or dice)
  # - {messageText} - message text or caption (chosen automatically based on what is present)
  base-message: "[{colorb}{senderName}{colorr}] {coloro}{messageMeta}{colorr}{messageText}"
  # Notice that plugin will insert a space after each entry, hence no space between {messageMeta} and {messageText} is needed
  # Better display newlines in texts of message and replies
  reply-newline-replacement: " / "
  message-newline-replacement: "\n> "
  message-meta:
    # All entries will be present if applicable

    # {forwardFrom} is the name of the user or channel the message is forwarded from
    forward: "[–ü–µ—Ä–µ—Å–ª–∞–Ω–æ –æ—Ç {forwardFrom}]"
    # In replies, variables {replySender} and {replyText} are present,
    # pointing to sender of the message that is replied to and the text of such message correspondingly.
    # This handles replies to the plugin messages
    # Just in case bot messages are prepended with an emoji and a space,
    # special variable is present: {replyTextAfterSpace}, which takes a substring after the first space of the {replyText}
    reply-minecraft: "[–í –æ—Ç–≤–µ—Ç –Ω–∞ {replyTextAfterSpace}]"
    # This handles all the other replies. Variables are the same EXCEPT OF {replyTextAfterSpace}
    reply: "[–í –æ—Ç–≤–µ—Ç –Ω–∞ [{replySender}] {replyText}]"
    # Variable: {viaBotUsername} - the username of the bot via which the message is sent
    via-bot: "[—á–µ—Ä–µ–∑ @{viaBotUsername}]"
    # Variable: {pollQuestion} - the question of the poll
    poll: "[–û–ø—Ä–æ—Å: {pollQuestion}]"
    # Variable: {diceValue} - result of the dice (e.g. for dart it is in [0; 5])
    dice: "[–ö—É–±–∏–∫: {diceValue}]"
    photo: "[–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è]"
    sticker: "[–°—Ç–∏–∫–µ—Ä]"
    gif: "[GIF]"
    file: "[–§–∞–π–ª]"
    audio: "[–ê—É–¥–∏–æ]"
    video: "[–í–∏–¥–µ–æ]"
    videomessage: "[–í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ]"
    voicemessage: "[–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]"
    contact: "[–ö–æ–Ω—Ç–∞–∫—Ç]"
    game: "[–ò–≥—Ä–∞]"
    venue: "[Venue]"
    geo: "[–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è]"
    pin: "[–∑–∞–∫—Ä–µ–ø–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ]"
    # Variable: {userInvited} - first and last name of user invited
    invite-one: "[–¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {userInvited}]"
    # Variable: {usersInvited} - comma-separated list of users invited in the format below
    invite-many: "[–¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {usersInvited}]"
    # Variable: {newTitle} - new chat title
    change-title: "[–º–µ–Ω—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –Ω–∞ {newTitle}]"
    change-photo: "[–º–µ–Ω—è–µ—Ç —Ñ–æ—Ç–æ —á–∞—Ç–∞]"
    schedule-voice-chat: "[–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª –≥–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç]"
    start-voice-chat: "[–Ω–∞—á–∏–Ω–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç]"
    finish-voice-chat: "[–∑–∞–≤–µ—Ä—à–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç]"
    # Variables the same as in invite-one and invite-many correspondingly
    invite-one-voice-chat: "[–ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤ –ì–ß –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {userInvited}]"
    invite-many-voice-chat: "[–ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤ –ì–ß –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {usersInvited}]"
